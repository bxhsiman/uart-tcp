提供给AI助手的项目说明文档
# 项目介绍
## 项目实现目的
本项目目的是实现一个可控的高效率的串口透传系统，使用TCP CLIENT将串口数据进行透传，串口波特率为921600(默认)，
串口数据源是一台高速发包的激光雷达，传输44bytes为一节的数据具体帧结构见下一节，务必不要丢包，务必保证数据传输的连续性
## 基本环境信息
本项目基于ESP32S3 使用IDFV5.4.1 进行开发，开发环境为wsl-ubuntu
## 项目结构介绍
根目录下的python文件为辅助脚本用于测试数据是否丢包，main文件夹中包含了esp32固件的源代码

# 数据包结构
## 结构说明
0A 00 02 00 CE 19 9C 09 36 FA B1 2F 16 CA AA EE 09 1B 12 DC 00 0A 00 16 3C F4 AE FC A7 06 E8 FB 03 01 C7 05 5D FC B8 FF 8F 00 17 00 
包头: 0A 00
序号: 0x (x从0-7)
空Byte: 00
数据: 其余位
## 我们的约定
1. 每节数据包的长度为44bytes
3. 称0-7共计8节数据包为1帧
4. 每帧数据包的长度为352bytes
5. 如果包长度不为44bytes 1帧中的数据包不连续 则认为数据包不合法 
# TODOLIST
[OK]0. 调整为esp32仅能作为TCP CLIENT 删除TCP SERVER相关代码
[OK]1. esp32仅需要将uart发送来的数据发送到TCP服务器上
[OK]2. esp32的3引脚是TX 4引脚是RX
[OK]3. uart数据处理策略
[OK]b. 预先分帧 待帧缓冲达到n的时候才触发发送 一次性全部发出
[OK]c. 发送数据帧时需要检查数据包的合法性 只发送合法数据帧
[OK]d. 发送的数据帧不可以额外添加任何信息 只能是纯数据帧
[OK]4. 重写get_data_server.py在接收到不合法数据帧时提醒 并给出统计信息 包括发送速率 收到帧数等

[OK]5. 请你将LOG打印使用宏定义管理 保证串口的干净程度
6. 添加wifi管理功能，使用SOFTAP或者STA可以访问到本机，调整以下配置
    a. 作为sta接入的ssid 和密码
    b. 是否开启softap模式(默认开启)
    c. TCPserver的ip和端口号
    d. 重启设备
    e. 作为softap ssid为ESP+mac地址后4位 密码为12345678
    f. 展示转发总量和err量等简略信息
# 代码风格要求
可以写多文件，但是dataproc一个文件 main一个文件 config一个文件
实现方式尽量简单 代码简洁可读性高
# 调试方法
1. 你可以使用idf的指令进行烧录 设备接入了ttyACM0 你可能需要给它777权限才可烧录/监察串口 如无ttyACM0 请你通知我检查
2. 本设备(计算机)的ip为 192.168.114.117 当前环境的wifi信息详见main.c文件
# 注意信息
1. 使用ESPLOGx的时候注意强转数据类型

[ok]# 测试进展1(由用户提供当前更改后的现象与用户提供的推断)
##esp32的日志
I (6458) DATAPROC: 📋 完整数据包#193: FB F8 98 0C 56 FB 0A 00 03 00 B1 08 51 04 FB FF 9A 15 67 DB F3 FD 15 09 57 D8 7F 19 C2 0B 6F FA 58 06 E0 03 27 02 C5 FB C4 04 02 FD 
W (6468) DATAPROC: ❌ 无效数据包 (无效包: 193/193) - 头部=FB F8, 序列=98, 保留=0C
I (6478) DATAPROC: 📋 完整数据包#194: 36 FD FF 01 96 FE 0A 00 04 00 5F 24 D5 16 8B E7 D1 2C 6A D9 97 E6 B1 11 F4 EB 64 03 3A 05 DA 01 55 FB CC 06 98 02 CF FD 8D 05 6E FD  
[ok]# 测试进展2
## ESP32的日志
I (67738) DATAPROC: 📊 统计信息: 总字节=325632, 包=7400(有效370), 帧=43(有效41)
W (67748) DATAPROC: ❌ 无效数据包 (无效包: 7031/7401) - 头部=FC 0A, 序列=00, 保留=05
W (67748) DATAPROC: ❌ 无效数据包 (无效包: 7032/7402) - 头部=01 0A, 序列=00, 保留=06
W (67758) DATAPROC: ❌ 无效数据包 (无效包: 7033/7403) - 头部=08 0A, 序列=00, 保留=07
W (67768) DATAPROC: ❌ 无效数据包 (无效包: 7034/7404) - 头部=FF D4, 序列=5E, 保留=0A

[ok]## 分析
可发现包截断位置不对，你应该从0A 00 开始往后去计算 或者说检测到0A 00 之后再去往结构体体中填充数据

[ok]# 测试进展2(由用户提供当前更改后的现象与用户提供的推断)
出现431错误
[ok]## 分析
HTTP 431错误通常是由于请求头过大导致的。ESP32的HTTP服务器默认配置可能无法处理较大的请求头或URI。我们需要调整以下配置来解决这个问题：
# 测试进展3
出现nvs初始化问题，并且nvs内容乱码
# 测试进展4
虽然修改内容已经保存 但是并不会连接最新设置的wifi TCPserver 等
## 建议 
每次烧录后自动将config.h的内容放入nvs 作为初始配置 后续在网页修改



# 学到的知识集锦
## 431错误的解决方法
# 这些配置是解决HTTP 431错误的关键设置

# HTTP服务器核心配置 - 解决431错误的关键
CONFIG_HTTPD_MAX_REQ_HDR_LEN=4096
CONFIG_HTTPD_MAX_URI_LEN=2048
CONFIG_HTTPD_PURGE_BUF_LEN=256

# 增大lwIP TCP缓冲区
CONFIG_LWIP_TCP_MSS=1460
CONFIG_LWIP_TCP_SND_BUF_DEFAULT=8192
CONFIG_LWIP_TCP_RCV_WND_DEFAULT=8192
CONFIG_LWIP_TCP_RECVMBOX_SIZE=64

# 增大系统任务栈
CONFIG_ESP_MAIN_TASK_STACK_SIZE=8192
CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE=4096

# 内存优化
CONFIG_ESP_TASK_WDT_TIMEOUT_S=10
CONFIG_FREERTOS_HZ=1000

